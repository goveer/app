# #Veer Development Guidelines

## Project Structure

project/
├── src/
│   ├── app/                    # App router pages
│   │   ├── dashboard/          # Dashboard routes
│   │   ├── auth/              # Auth routes
│   │   │   ├── callback/      # OAuth callback
│   │   │   └── confirm/       # Email confirmation
│   │   ├── login/            # Login page
│   │   └── signup/           # Signup page
│   ├── components/
│   │   ├── ui/               # Base components
│   │   ├── dashboard/        # Dashboard features
│   │   ├── auth/            # Auth forms
│   │   └── layout/          # Layout components
│   └── lib/
│       ├── supabase/        # Supabase clients
│       │   ├── client.ts    # Browser client
│       │   ├── server.ts    # Server client
│       │   └── middleware.ts # Auth middleware
│       └── utils/           # Helper functions

## Package Management

- Use Yarn for all package management
- Commands:
  ```bash
  yarn install      # Install dependencies
  yarn dev         # Start development server
  yarn build       # Build for production
  yarn start       # Start production server
  yarn lint        # Run linting
  yarn test        # Run tests
  ```

## Auth Implementation

- Server-side auth using Supabase SSR package
- Protected routes with middleware
- Email verification flow
- Magic link authentication
- Server actions for auth operations

## Security Best Practices

- Use `getUser()` instead of `getSession()` for server-side auth
- Implement RLS policies for all tables
- Protected routes in middleware
- Server-side validation
- Secure cookie handling

## Component Patterns

### Base Component Template
```typescript
interface ComponentProps extends React.ComponentProps<'div'> {
  title: string;
}

export function Component({ title, className, ...props }: ComponentProps) {
  return (
    <div className={cn('base-styles', className)} {...props}>
      {/* Content */}
    </div>
  );
}
```

### Form Patterns
- Server actions for submissions
- Client-side validation
- Loading states
- Error handling
- Multi-step forms

## Styling System

### Colors & Theme
- Primary: #46296B
- Secondary: #F43F5E
- Background: #FFFFFF
- Text: #1F2937

### Typography Scale
- Headers: "text-2xl font-semibold"
- Subheaders: "text-lg font-medium"
- Body: "text-sm"
- Muted: "text-sm text-muted-foreground"

## Development Principles

- Server Components by default
- Client Components when needed
- Server Actions for forms
- Strong TypeScript typing
- Component composition
- Performance optimization